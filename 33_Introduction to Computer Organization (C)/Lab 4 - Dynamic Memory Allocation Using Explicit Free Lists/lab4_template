#include <stdio.h>
#include <stdlib.h>

#define HEAPSIZE 32768

#define hdr_payload(i)  ((struct HDR *) &heap[i])->payload
#define hdr_freeall(i)  ((struct HDR *) &heap[i])->freeall
#define hdr_succesr(i)  ((struct HDR *) &heap[i])->succesr
#define hdr_previus(i)  ((struct HDR *) &heap[i])->previus

char *heap ;
int  heapsize ;

int sizehdr ;

struct HDR       // free block header/footer/linked list
   {
   int  payload ;    // size of block (excluding headers)
   char freeall ;    // is this block allocated? 0=free/1=allocated
   int  succesr ;    // successor free block
   int  previus ;    // previous free block
   } anchor ;

void dump_heap( char *t )   // prints all of the headers/footers on the heap
   {
   int i ;

   int j=0 ;
   printf( "%s anchor= %d\n", t, anchor.succesr ) ;
   for( i=0; i<heapsize; i=i+sizehdr  )
      if ( hdr_payload(i) != 0 )
         {
         printf( "%6d %6d %6d %6d %6d\n", i, hdr_payload(i), hdr_freeall(i), hdr_previus(i), hdr_succesr(i) ) ;
         if ( j++%2==1 ) printf( "\n" ) ;
         }
   }

void init_heap()   // initialize the heap
   {
   heap = (char *) calloc( HEAPSIZE, 1 ) ;
   sizehdr =  16 ;
   heapsize = HEAPSIZE ;

   anchor.payload =  0 ;   // anchor
   anchor.freeall =  1 ;
   anchor.succesr =  0 ;
   anchor.previus = -1 ;

   hdr_payload(0) = heapsize-2*sizehdr ;   // header
   hdr_freeall(0) = 0 ;
   hdr_succesr(0) = heapsize ;
   hdr_previus(0) = -1 ;
   hdr_payload(heapsize-sizehdr) = heapsize-2*sizehdr ; // footer
   hdr_freeall(heapsize-sizehdr) = 0 ;
   }

void lfree( int *aa )   // frees the block at address aa 
   {
   // lfree code here
   }   

int lalloc( int amt )   // allocates a block of size int
   {
   // lalloc code here
   }


int main()
   {
   int i ;
   int j = 0  ;
   int blks[100] ;

   init_heap() ;
   dump_heap( "init heap" ) ;

   for( i=0; i<20; i++ )
      blks[j++] = lalloc( rand()%500 ) ;
   dump_heap( "first allocs" ) ;

   lfree( &blks[10] ) ;
   lfree( &blks[11] ) ;
   dump_heap( "coalesce with upper" ) ;

   lfree( &blks[14] ) ;
   lfree( &blks[13] ) ;
   dump_heap( "coalesce with lower" ) ;

   lfree( &blks[5] ) ;
   lfree( &blks[7] ) ;
   lfree( &blks[6] ) ;
   dump_heap( "coalesce with both" ) ;

   blks[5] = lalloc( 80000 ) ;
   dump_heap( "blew the top off" ) ;

   for( i=0; i<20; i++ )
      if (blks[i] != 0 )
         {
         lfree( &blks[i] ) ;
         }
   dump_heap( "free everything " ) ;

   return 0 ;
   }
