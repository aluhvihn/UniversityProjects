# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Alvin Lim
Student ID: 804 011 675
Email: aluhvihn@gmail.com

# Partner 2 (if you're working in a team)
Name: 
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

I first forked to download the files in parallel, then forked to upload the
files in parallel.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

In "start_download()":
  1. Buffer overrun could happen for t->filename when a filename is longer
  than FILENAMESIZ-1. I fixed this by using strncpy() instead of strcp(),
  to copy FILENAMESIZ bytes, as well as adding a null terminator at the end of
  the filename string for later read/copies.

In "task_download()":
  2. Similarly, buffer overrun could  happen for t->disk_filename when
  t->filename exceeds FILENAMESIZ. Although the last fix makes it so this
  wouldn't happen, I still fixed it with the same procedure to be safe.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

  1. Have to account for evil peers trying to fill up disk. Do this by
  limiting maximum file size. (in "task_download()").

  2. Block off peers which have non-functioning connections, or
  "too slow". (in "task_download()").

  3. Make sure to serve only files in the correct directory.
  (in "task_upload()").

  4. I wasn't sure how to increase the task buffer size to allow for more peers
  for the "run-popular" scenario, without rewriting too much code, so I just
  increased the size of TASKBUFSIZ from 4kB(4096) to 32kB(32768), which seems
  to be enough to handle the "make run-popular" request without error-ing out
  as it usually does.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

1. File name buffer overrun: send GET request much longer than FILENAMESIZ to
attack bug in 2A. This could be used to overflow the buffer, to insert malicious
code. In this way, an attacker could cause the victim to execute arbitrary code.

2. Try to fill up peer's disk, by uploading endless data. This monopolizes the
peer's resources (disk space). This sabatoges the victim's computer resources, 
as well as leaves it vulnerable to buffer overflow attacks as well.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
